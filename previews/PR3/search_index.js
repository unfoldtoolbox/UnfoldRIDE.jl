var documenterSearchIndex = {"docs":
[{"location":"11-running_ride/#Running-Classic-and-Unfold-RIDE","page":"Running Classic and Unfold RIDE","title":"Running Classic and Unfold RIDE","text":"","category":"section"},{"location":"11-running_ride/","page":"Running Classic and Unfold RIDE","title":"Running Classic and Unfold RIDE","text":"You can find the code for this tutorial here, using this Project.toml.","category":"page"},{"location":"11-running_ride/","page":"Running Classic and Unfold RIDE","title":"Running Classic and Unfold RIDE","text":"For this tutorial, we use the data from the data simulation example. First we include the data simulation and add some additional noise to the data","category":"page"},{"location":"11-running_ride/","page":"Running Classic and Unfold RIDE","title":"Running Classic and Unfold RIDE","text":"include(\"simulate_variable_latency_sequence.jl\")\n\n#add some noise to the simulated data\ndata_noisy = copy(data)\nUnfoldSim.add_noise!(MersenneTwister(1234), PinkNoise(; noiselevel = 0.9), data_noisy)","category":"page"},{"location":"11-running_ride/","page":"Running Classic and Unfold RIDE","title":"Running Classic and Unfold RIDE","text":"Now that we have our data_noisy and evts_without_c we can define a suitable configuration for ride and run the algorithm. The ranges for the individual components have to be determined through manual observation of the data.","category":"page"},{"location":"11-running_ride/","page":"Running Classic and Unfold RIDE","title":"Running Classic and Unfold RIDE","text":"#run the ride algorithm on the simulated data\nbegin\n    #config for ride algorithm\n    cfg = RideConfig(\n        #sfreq is the sampling frequency of the data\n        sfreq = 100,\n        #ranges for the individual components are determined by manually inspecting the data\n        s_range = [-0.1, 0.3],\n        r_range = [0, 0.4],\n        c_range = [-0.4, 0.4],\n        #the range in which the initial peak estimation for the C component is performed\n        c_estimation_range = [0, 0.9],\n        #the range for one epoch\n        epoch_range = [-0.1, 1]\n    )\n    #run the ride algorithm\n    #We only have one channel, so we only need the first entry from the results vector.\n    resultsClassic = ride_algorithm(ClassicMode, data_noisy, evts_without_c, cfg)[1]\n    resultsUnfold = ride_algorithm(UnfoldMode, data_noisy, evts_without_c, cfg)[1]\nend","category":"page"},{"location":"11-running_ride/","page":"Running Classic and Unfold RIDE","title":"Running Classic and Unfold RIDE","text":"Finally we can plot the results of both algorithm modes. <details> <summary>Code used for Graph Creation</summary>","category":"page"},{"location":"11-running_ride/","page":"Running Classic and Unfold RIDE","title":"Running Classic and Unfold RIDE","text":"#plot the results\nbegin\n    f = Figure(size = (1000, 400))\n\n    #plot classic results\n    ax = Axis(f[1, 1], yticks = -100:100, title=\"Classic RIDE\")\n    raw = lines!(resultsClassic.raw_erp; color = \"black\", linewidth = 3, label=\"ERP\")\n    s = lines!(resultsClassic.s_erp; color = \"blue\", label=\"S\")\n    c = lines!(resultsClassic.c_erp; color = \"red\", label=\"C\")\n    r = lines!(resultsClassic.r_erp; color = \"green\", label=\"R\")\n    \n    #plot unfold results\n    ax = Axis(f[1, 2], yticks = -100:100, title=\"Unfold RIDE\")\n    raw = lines!(resultsUnfold.raw_erp; color = \"black\", linewidth = 3, label=\"ERP\")\n    s = lines!(resultsUnfold.s_erp; color = \"blue\", label=\"S\")\n    c = lines!(resultsUnfold.c_erp; color = \"red\", label=\"C\")\n    r = lines!(resultsUnfold.r_erp; color = \"green\", label=\"R\")\n    axislegend(ax)\n\n    display(f)\nend","category":"page"},{"location":"11-running_ride/","page":"Running Classic and Unfold RIDE","title":"Running Classic and Unfold RIDE","text":"</details>","category":"page"},{"location":"11-running_ride/","page":"Running Classic and Unfold RIDE","title":"Running Classic and Unfold RIDE","text":"(Image: Results for Classic and Unfold RIDE)","category":"page"},{"location":"11-running_ride/","page":"Running Classic and Unfold RIDE","title":"Running Classic and Unfold RIDE","text":"<!–- TODO: add expected results Since this is the result of simulated data, we can easily calculate what output we should expect from the component definitions:","category":"page"},{"location":"11-running_ride/","page":"Running Classic and Unfold RIDE","title":"Running Classic and Unfold RIDE","text":"onset_stimulus = UniformOnset(width = 0, offset = 100)\nonset_c = UniformOnset(width = 30, offset = 10)\nonset_r = UniformOnset(width = 40, offset = 20)","category":"page"},{"location":"11-running_ride/","page":"Running Classic and Unfold RIDE","title":"Running Classic and Unfold RIDE","text":"–>","category":"page"},{"location":"91-developer/#dev_docs","page":"Developer documentation","title":"Developer documentation","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"note: Contributing guidelines\nIf you haven't, please read the Contributing guidelines first.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If you want to make contributions to this package that involves code, then this guide is for you.","category":"page"},{"location":"91-developer/#First-time-clone","page":"Developer documentation","title":"First time clone","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: If you have writing rights\nIf you have writing rights, you don't have to fork. Instead, simply clone and skip ahead. Whenever upstream is mentioned, use origin instead.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If this is the first time you work with this repository, follow the instructions below to clone the repository.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fork this repo\nClone your repo (this will create a git remote called origin)\nAdd this repo as a remote:\ngit remote add upstream https://github.com/unfoldtoolbox/UnfoldRIDE.jl","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"This will ensure that you have two remotes in your git: origin and upstream. You will create branches and push to origin, and you will fetch and update your local main branch from upstream.","category":"page"},{"location":"91-developer/#Linting-and-formatting","page":"Developer documentation","title":"Linting and formatting","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Install a plugin on your editor to use EditorConfig. This will ensure that your editor is configured with important formatting settings.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We use https://pre-commit.com to run the linters and formatters. In particular, the Julia code is formatted using JuliaFormatter.jl, so please install it globally first:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # Press ]\npkg> activate\npkg> add JuliaFormatter","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To install pre-commit, we recommend using pipx as follows:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"# Install pipx following the link\npipx install pre-commit","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"With pre-commit installed, activate it as a pre-commit hook:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit install","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To run the linting and formatting manually, enter the command below:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit run -a","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Now, you can only commit if all the pre-commit tests pass.","category":"page"},{"location":"91-developer/#Testing","page":"Developer documentation","title":"Testing","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"As with most Julia packages, you can just open Julia in the repository folder, activate the environment, and run test:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # press ]\npkg> activate .\npkg> test","category":"page"},{"location":"91-developer/#Working-on-a-new-issue","page":"Developer documentation","title":"Working on a new issue","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We try to keep a linear history in this repo, so it is important to keep your branches up-to-date.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fetch from the remote and fast-forward your local main\ngit fetch upstream\ngit switch main\ngit merge --ff-only upstream/main\nBranch from main to address the issue (see below for naming)\ngit switch -c 42-add-answer-universe\nPush the new local branch to your personal remote repository\ngit push -u origin 42-add-answer-universe\nCreate a pull request to merge your remote branch into the org main.","category":"page"},{"location":"91-developer/#Branch-naming","page":"Developer documentation","title":"Branch naming","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If there is an associated issue, add the issue number.\nIf there is no associated issue, and the changes are small, add a prefix such as \"typo\", \"hotfix\", \"small-refactor\", according to the type of update.\nIf the changes are not small and there is no associated issue, then create the issue first, so we can properly discuss the changes.\nUse dash separated imperative wording related to the issue (e.g., 14-add-tests, 15-fix-model, 16-remove-obsolete-files).","category":"page"},{"location":"91-developer/#Commit-message","page":"Developer documentation","title":"Commit message","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Use imperative or present tense, for instance: Add feature or Fix bug.\nHave informative titles.\nWhen necessary, add a body with details.\nIf there are breaking changes, add the information to the commit message.","category":"page"},{"location":"91-developer/#Before-creating-a-pull-request","page":"Developer documentation","title":"Before creating a pull request","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: Atomic git commits\nTry to create \"atomic git commits\" (recommended reading: The Utopic Git History).","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Make sure the tests pass.\nMake sure the pre-commit tests pass.\nFetch any main updates from upstream and rebase your branch, if necessary:\ngit fetch upstream\ngit rebase upstream/main BRANCH_NAME\nThen you can open a pull request and work with the reviewer to address any issues.","category":"page"},{"location":"91-developer/#Building-and-viewing-the-documentation-locally","page":"Developer documentation","title":"Building and viewing the documentation locally","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Following the latest suggestions, we recommend using LiveServer to build the documentation. Here is how you do it:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Run julia --project=docs to open Julia in the environment of the docs.\nIf this is the first time building the docs\nPress ] to enter pkg mode\nRun pkg> dev . to use the development version of your package\nPress backspace to leave pkg mode\nRun julia> using LiveServer\nRun julia> servedocs()","category":"page"},{"location":"91-developer/#Making-a-new-release","page":"Developer documentation","title":"Making a new release","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To create a new release, you can follow these simple steps:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Create a branch release-x.y.z\nUpdate version in Project.toml\nUpdate the CHANGELOG.md:\nRename the section \"Unreleased\" to \"[x.y.z] - yyyy-mm-dd\" (i.e., version under brackets, dash, and date in ISO format)\nAdd a new section on top of it named \"Unreleased\"\nAdd a new link in the bottom for version \"x.y.z\"\nChange the \"[unreleased]\" link to use the latest version - end of line, vx.y.z ... HEAD.\nCreate a commit \"Release vx.y.z\", push, create a PR, wait for it to pass, merge the PR.\nGo back to main screen and click on the latest commit (link: https://github.com/unfoldtoolbox/UnfoldRIDE.jl/commit/main)\nAt the bottom, write @JuliaRegistrator register","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"After that, you only need to wait and verify:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Wait for the bot to comment (should take < 1m) with a link to a PR to the registry\nFollow the link and wait for a comment on the auto-merge\nThe comment should said all is well and auto-merge should occur shortly\nAfter the merge happens, TagBot will trigger and create a new GitHub tag. Check on https://github.com/unfoldtoolbox/UnfoldRIDE.jl/releases\nAfter the release is create, a \"docs\" GitHub action will start for the tag.\nAfter it passes, a deploy action will run.\nAfter that runs, the stable docs should be updated. Check them and look for the version number.","category":"page"},{"location":"95-reference/#reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"95-reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#UnfoldRIDE.AbstractMode","page":"Reference","title":"UnfoldRIDE.AbstractMode","text":"abstract type AbstractMode\n\nAn abstract type that defines different modes of the RIDE algorithm.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#UnfoldRIDE.ClassicMode","page":"Reference","title":"UnfoldRIDE.ClassicMode","text":"struct ClassicMode <: AbstractMode\n\nA struct representing the ClassicMode of RIDE. Pass it to the RIDE algorithm to      run in Classic mode.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#UnfoldRIDE.RideConfig","page":"Reference","title":"UnfoldRIDE.RideConfig","text":"@with_kw struct RideConfig\n\nA struct holding the configuration values of the RIDE algorithm.\n\nFields\n\nsfreq::Int: The sampling frequency of the data.\ns_range::Vector{Float64}: The range of the S component. Usually determined\n\nthrough manual inspection of the data.\n\nr_range::Vector{Float64}: The range of the R component. Usually determined\n\nthrough manual inspection of the data.\n\nc_range::Vector{Float64}: The range of the C component. Usually determined\n\nthrough manual inspection of the data.\n\nc_estimation_range::Vector{Float64}: The range used for the intial C \n\ncomponent latency estimation through peak picking.\n\nepoch_range::Vector{Float64}: The range of one epoch centered around the stimulus onset.\niteration_limit::Int = 4: The maximum number of iterations of the RIDE algorithm. This \n\nis for the outer decomposition-latency estimation loop.\n\nheuristic1::Bool = true: A flag to enable/disable heuristic 1. This heursitic ensures a \n\nmonoton latency evolution.\n\nheuristic2::Bool = true: A flag to enable/disable heuristic 2. This heuristic randomizes\n\nand fixes a latency on encountering a convex xcorrelation result.\n\nheuristic2_rng = MersenneTwister(1234): The random number generator used for heuristic 2.\nheuristic3::Bool = true: A flag to enable/disable heuristic 3. This heuristic searches for\n\ncompeting peaks in the xcorrelation results. The peak closest to the previous latency is chosen.\n\nheuristic3_threshhold::Float64 = 0.9: The threshold used for heuristic 3. If the peak is\n\nbelow this threshold * the maximum peak, it is considered a competing peak.\n\nfiltering::Bool = true: A flag to enable/disable filtering of the data before performing the \n\ncross correlation.\n\nsave_interim_results::Bool = false: A flag to enable/disable saving the interim results of\n\neach iteration of the RIDE algorithm.\n\nExamples\n\ncfg = RideConfig(\n    sfreq = 100,\n    s_range = [-0.2, 0.4],\n    r_range = [0, 0.8],\n    c_range = [-0.4, 0.4],\n    c_estimation_range = [-0.1, 0.9],\n    epoch_range = [-0.3, 1.6],\n    iteration_limit = 5,\n    heuristic1 = true,\n    heuristic2 = true,\n    heuristic3 = true,\n    save_interim_results = true,\n)\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#UnfoldRIDE.RideResults","page":"Reference","title":"UnfoldRIDE.RideResults","text":"@with_kw mutable struct RideResults\n\nA struct holding the results of a single run of the RIDE algorithm.\n\nFields\n\ninterim_results::Vector{RideResults}: A vector of RideResults structs that \n\nhold the interim results of each iteration of the RIDE algorithm. This field is  only filled when the algorithm is run with the save_interim_results flag.\n\nraw_erp::Array{Float64}: The raw ERP.\ns_erp::Array{Float64}: The ERP of the S component.\nr_erp::Array{Float64}: The ERP of the R component.\nc_erp::Array{Float64}: The ERP of the C component.\ns_erp_unpadded::Array{Float64}: The ERP of the S component, unpadded.\nr_erp_unpadded::Array{Float64}: The ERP of the R component, unpadded.\nc_erp_unpadded::Array{Float64}: The ERP of the C component, unpadded.\nc_latencies::Array{Int64}: The latencies of the C component from the stimulus \n\nonset.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#UnfoldRIDE.UnfoldMode","page":"Reference","title":"UnfoldRIDE.UnfoldMode","text":"struct UnfoldMode <: AbstractMode\n\nA struct representing the UnfoldMode of RIDE. Pass it to the RIDE algorithm to      run in Unfold mode.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#UnfoldRIDE.build_c_evts_table-Tuple{DataFrames.DataFrame, DataFrames.DataFrame, RideConfig}","page":"Reference","title":"UnfoldRIDE.build_c_evts_table","text":"build_c_evts_table(latencies_df::DataFrame, evts, cfg::RideConfig)\n\nCreate C event table by copying S and adding the estimated latency.\n\nArguments\n\nlatencies_df::DataFrame: DataFrame containing the Latency field. Latencies from epoch start are expected.\nevts::DataFrame: Event table. S events are extracted from this table.\n\nReturns\n\nevts_c::DataFrame : New event table containing only the C events.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#UnfoldRIDE.build_c_evts_table-Tuple{Vector, DataFrames.DataFrame, RideConfig}","page":"Reference","title":"UnfoldRIDE.build_c_evts_table","text":"build_c_evts_table(latencies_df_vector::Vector, evts::DataFrame, cfg::RideConfig)\n\nCreate C event table by copying S and adding the estimated latency.\n\nThis version is used for multi channel data. It calculates the mean of all channels as the estimated latencies.\n\nArguments\n\nlatencies_df_vector::Vector: Vector of DataFrames containing the Latency field. Latencies from epoch start are expected.\nevts::DataFrame: Event table. S events are extracted from this table.\n\nReturns\n\nevts_c::DataFrame : New event table containing only the C events.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#UnfoldRIDE.c_range_adjusted-Tuple{Vector{Float64}}","page":"Reference","title":"UnfoldRIDE.c_range_adjusted","text":"c_range_adjusted(c_range::Vector{Float64})\n\nHelper Function to adjust the crange to be from 0 to the difference of the original crange. This simplifies several of the algorithms functions without the need to create a new variable.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#UnfoldRIDE.create_results-Tuple{Any, Vector, Vector, Vector, Vector, Any, RideConfig}","page":"Reference","title":"UnfoldRIDE.create_results","text":"create_results(evts, raw_erp::Vector, s_erp::Vector, r_erp::Vector, c_erp::Vector, c_latencies_df, cfg::RideConfig)\n\nCreate a RideResults object from the given parameters. Pads component erps to be the same length as one epoch. Result also includes unpadded versions. Changes the c_latencies to be from stimulus onset instead of epoch start.\n\nReturns\n\nresult::RideResults : The created RideResults object, the interim_results field is left empty.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#UnfoldRIDE.dspfilter-Tuple{Vector{Float64}, Int64, Int64}","page":"Reference","title":"UnfoldRIDE.dspfilter","text":"dspfilter(signal_to_filter::Vector{Float64}, filter_at::Int64, sampling_rate::Int64)\n\nFilter the given signal with a lowpass filter at the given sampling rate.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#UnfoldRIDE.findxcorrpeak-Tuple{VecOrMat{Float64}, Vector{Float64}}","page":"Reference","title":"UnfoldRIDE.findxcorrpeak","text":"findxcorrpeak(d::Matrix, kernel::Vector; window = false)\n\nCalculate the cross correlation between the data and the kernel for each epoch and find the peak.\n\nArguments\n\ndata::Matrix{Float64}: Input data in shape (samples, epochs)\nkernel::Vector{Float64}: Kernel to cross correlate with the data.\n\nKeyword arguments\n\nwindow::Bool = false: Apply a Hanning window to the kernel before cross-correlation,    favoring central values of the kernel.\n\nReturns\n\nxc::Vector{Vector{Float64}} : Cross correlation result per epoch.\nmaxima::Vector{Int} : Maxima of the cross correlation per epoch.\nonset::Int : Onset of the kernel.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#UnfoldRIDE.heuristic1_monoton_latency_changes!-Tuple{DataFrames.DataFrame, DataFrames.DataFrame, DataFrames.DataFrame}","page":"Reference","title":"UnfoldRIDE.heuristic1_monoton_latency_changes!","text":"heuristic1_monoton_latency_changes!(latencies_df::DataFrame, latencies_df_old::DataFrame, latencies_df_old_old::DataFrame)\n\nAssure tha the changes in the latencies are monoton, i.e. they always change in one direction. If a non monoton change is detected, revert the change and set the latency as fixed in the DataFrame.\n\nArguments\n\nlatencies_df::DataFrame: The current latencies DataFrame.\nlatencies_df_old::DataFrame: The previous latencies DataFrame, used to calculate the new change in latency.\nlatencies_df_old_old::DataFrame: The latencies DataFrame before the previous one, used to calculate the previous change in latency.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#UnfoldRIDE.heuristic2_randomize_latency_on_convex_xcorr!","page":"Reference","title":"UnfoldRIDE.heuristic2_randomize_latency_on_convex_xcorr!","text":"heuristic2_randomize_latency_on_convex_xcorr!(latencies_df, latencies_df_old, xcorr, rng = MersenneTwister(1234),)\n\nAssure that the cross correlation is not convex, randomize the latency if it is.\n\nCheck if the cross correlation is convex by searching for peaks in the cross correlation. When no peak is found, the xcorrelation is considered convex and  the latency is randomized with a gaussian distribution over the previous latencies.\n\nArguments\n\nlatencies_df::DataFrame: The current latencies DataFrame.\nlatencies_df_old::DataFrame: The previous latencies DataFrame.    Used to calculate the gaussian distribution for the randomization.\nxcorr::Vector{Vector{Float64}}: Cross correlation results for every epoch.\n\nKeyword arguments\n\nrng::AbstractRNG = MersenneTwister(1234): RNG used for random latency generation.\n\n\n\n\n\n","category":"function"},{"location":"95-reference/#UnfoldRIDE.heuristic3_pick_closest_xcorr_peak!-Tuple{DataFrames.DataFrame, DataFrames.DataFrame, Vector{Vector{Float64}}}","page":"Reference","title":"UnfoldRIDE.heuristic3_pick_closest_xcorr_peak!","text":"heuristic3_pick_closest_xcorr_peak!(latencies_df::DataFrame, latencies_df_old::DataFrame, xcorr::Vector{Vector{Float64}}; equality_threshold::Float64 = 0.9, onset::Int64 = 0)\n\nCheck for multiple \"competing\" peaks in the cross correlation and pick the closest one to the previous latency.\n\nAny peak with a value > maximum * equality_threshold is considered a competing peak. Latencies marked as fixed are skipped.\n\nArguments\n\nlatencies_df::DataFrame: The current latencies DataFrame.\nlatencies_df_old::DataFrame: The previous latencies DataFrame.    Necessary to calculate the closest peak to the previous latency.\nxcorr::Vector{Vector{Float64}}: Cross correlation results for every epoch.\n\nKeyword arguments (if needed)\n\nequality_threshold::Float64 = 0.9: Threshold to determine which peaks are considered as competing.   Any peak with a value > maximum * equality_threshold is considered a competing peak, with maximum being the highest peak.   The threshold must be between 0 and 1.\nonset::Int64 = 0: Onset of the kernel used in the cross correlation. Used to bring the latencies into the proper format.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#UnfoldRIDE.initial_peak_estimation-Tuple{Array{Float64}, DataFrames.DataFrame, RideConfig}","page":"Reference","title":"UnfoldRIDE.initial_peak_estimation","text":"initial_peak_estimation(data_continous::Array{Float64}, evts::DataFrame, cfg::RideConfig)\n\nEstimates the C latencies of every epoch using peak picking in the given cfg.cestimationrange. The resulting latencies are from the start of the epoch to the beginning of the c_range.\n\nArguments\n\ndata_continous::Array{Float64}: Continous data on which the peak picking is performed.\nevts::DataFrame: Event table. S events are extracted from this table.\ncfg::RideConfig: Configuration for the RIDE algorithm.\n\nReturns\n\nlatencies_df::DataFrame : DataFrame containing the estimated latencies for every epoch and a fixed=false column. Latencies are from the start of the epoch to the beginning of the c_range.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#UnfoldRIDE.initial_peak_estimation-Tuple{Matrix{Float64}, DataFrames.DataFrame, RideConfig}","page":"Reference","title":"UnfoldRIDE.initial_peak_estimation","text":"initial_peak_estimation(data_continous::Matrix{Float64}, evts::DataFrame, cfg::RideConfig)\n\nMulti channel version of initialpeakestimation.\n\nArguments\n\ndata_continous::Matrix{Float64}: Input data ins shape (channels, samples).\nevts::DataFrame: Event table. S events are extracted from this table.\ncfg::RideConfig: Configuration for the RIDE algorithm.\n\nReturns\n\nlatencies_df_vector::Vector{DataFrame} : Vector of DataFrames containing the estimated latencies for every channel. Latencies are from the start of the epoch to the beginning of the c_range.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#UnfoldRIDE.pad_erp_to_epoch_size-Tuple{Vector{Float64}, Int64, RideConfig}","page":"Reference","title":"UnfoldRIDE.pad_erp_to_epoch_size","text":"pad_erp_to_epoch_size(erp::Vector{Float64}, latency_from_epoch_start::Int64, cfg::RideConfig)\n\nPad the given erp to the epoch size using the given latency.\n\nReturns\n\npadded_erp::Vector{Float64} : A new padded erp.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#UnfoldRIDE.save_interim_results!-Tuple{Vector{Vector}, Any, Matrix, Matrix, Matrix, Matrix, Vector, RideConfig}","page":"Reference","title":"UnfoldRIDE.save_interim_results!","text":"save_interim_results!(results_vector::Vector{Vector}, evts, raw_erp::Matrix, s_erp::Matrix, r_erp::Matrix, c_erp::Matrix, c_latencies_df::Vector, cfg::RideConfig)\n\nHelper function to create a RideResults object for every channel and add it to the given results_vector.\n\n\n\n\n\n","category":"method"},{"location":"90-contributing/#contributing","page":"Contributing guidelines","title":"Contributing guidelines","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"First of all, thanks for the interest!","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"We welcome all kinds of contribution, including, but not limited to code, documentation, examples, configuration, issue creating, etc.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"Be polite and respectful, and follow the code of conduct.","category":"page"},{"location":"90-contributing/#Bug-reports-and-discussions","page":"Contributing guidelines","title":"Bug reports and discussions","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"90-contributing/#Working-on-an-issue","page":"Contributing guidelines","title":"Working on an issue","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you found an issue that interests you, comment on that issue what your plans are. If the solution to the issue is clear, you can immediately create a pull request (see below). Otherwise, say what your proposed solution is and wait for a discussion around it.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"tip: Tip\nFeel free to ping us after a few days if there are no responses.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If your solution involves code (or something that requires running the package locally), check the developer documentation. Otherwise, you can use the GitHub interface directly to create your pull request.","category":"page"},{"location":"10-data_simulation/#Simulation-with-Variable-Latency-Components","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"","category":"section"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"You can find the code for this tutorial here, using this Project.toml.","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"<!–-","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"simulating data is reasonable?\nto run ride your simulation data needs a variable latency component\nUnfoldSim can be used to generate the data\nModification to UnfoldSim is required as seen here","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"–>","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"To properly run the RIDE algorithm, we need a dataset including at least one component with a variable latency. UnfoldSim can be used to generate the EEG data and the SequenceDesign allows us to define a sequence of components with one shared onset. ","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"To simulate a variable latency, we need a bit more control over the onset of each component. The following code creates a new SequenceOnset, which allows us to define one onset for the stimulus and individual onsets for each component. In addition to defining individual onsets, we also modify the simulate_onsets function to apply all our component onsets from the stimulus onset. The default behaviour would be to simply apply the onsets from the previous component, which wouldn't make any sense for this scenario.","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"@with_kw struct SequenceOnset <: AbstractOnset\n    stimulus_onset::AbstractOnset\n    components_onset::Vector{AbstractOnset}\nend\n\nfunction UnfoldSim.simulate_onsets(rng, onset::SequenceOnset, simulation::Simulation)\n    #calculate stimulus onsets\n    stimulus_onsets =\n        simulate_interonset_distances(rng, onset.stimulus_onset, simulation.design)\n    stimulus_offset_accumulated = accumulate(+, stimulus_onsets, dims = 1, init = 0)\n\n    #calculate component offsets\n    components_onsets = Vector{Vector{Int}}()\n    for obj in onset.components_onset\n        Random.seed!(rng, rand(rng, 1:10000))\n        push!(components_onsets, simulate_interonset_distances(rng, obj, simulation.design))\n    end\n\n    #combine the stimulus offsets and component offsets into one vector\n    result = Vector{Int}()\n    for i in axes(stimulus_offset_accumulated, 1)\n        current_offset = stimulus_offset_accumulated[i]\n        push!(result, current_offset)\n        for component_onsets in components_onsets\n            push!(result, current_offset + component_onsets[i])\n        end\n    end\n\n    #cut result to the design size\n    result = result[1:size(simulation.design)]\n    return result\nend","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"<!–-","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"SequenceDesign is used, which is only available from the github branch (designated in the ","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"Project.toml)","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"If you want to learn more about what's happening here, we recommend checking out UnfoldSim documentation","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"–->","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"In RIDE, we generally differentiate between three different component clusters: S,C and R:","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"S represents the Stimulus\nR represents a response to the Stimulus with a known variable latency\nC represents a response to the Stimulus with an uknown variable latency","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"We define components for each of these component clusters and use UnfoldSim to model them. If there are questions about the next code section, we recommend checking out the UnfoldSim documentation.","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"#Define the design\ndesign =\n    SingleSubjectDesign(; conditions = Dict(:cond => [\"car\", \"face\"])) |>\n    x -> RepeatDesign(x, 4)\n\n#Create a sequence design with three components (S, C, R)\nsequence_design = SequenceDesign(design, \"SCR\")\n\n# Define the components\ns_component_1 =\n    LinearModelComponent(; basis = vcat(p100()), formula = @formula(0 ~ 1), β = [2])\ns_component_2 =\n    LinearModelComponent(; basis = n170(), formula = @formula(0 ~ 1 + cond), β = [2, 0])\nc_component =\n    LinearModelComponent(; basis = p100(), formula = @formula(0 ~ 1 + cond), β = [-4, 2])\nr_component =\n    LinearModelComponent(; basis = p100(), formula = @formula(0 ~ 1 + cond), β = [6, 0])\n\n#offset of the stimulus defines the distance between two epochs\n#offsets for the components are applied from the stimulus due to the custom simulate_onsets method\n#the latencies for the first three epochs would be:\n# stimulus  = 100,      200,        300\n# c         = 110:140,  210:240,    310:340\n# r         = 120:160,  220:260,    320:360\nonset_stimulus = UniformOnset(width = 0, offset = 100)\nonset_c = UniformOnset(width = 30, offset = 10)\nonset_r = UniformOnset(width = 40, offset = 20)\nsequence_onset = SequenceOnset(onset_stimulus, [onset_c, onset_r])\n#the components dict has to be consistent with the sequence design, i.e. contain S, C, R\ncomponents =\n    Dict('S' => [s_component_1, s_component_2], 'C' => [c_component], 'R' => [r_component])\n\n#simulate the data\ndata, evts = simulate(\n    MersenneTwister(7),\n    sequence_design,\n    components,\n    sequence_onset,\n    PinkNoise(noiselevel = 0.1),\n)","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"Running the code generates the following data. The noise is set to a relatively low 0.1 compared to the max amplitude of 6, which clearly shows the individual components. Note how the C and R component always appear after the Stimulus, but the order of C and R isn't consistent. It is entirely determined by our onset definitions in the previous code segment.","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"<details> <summary>Code used for Graph Creation</summary>","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"#plotting\nbegin\n    f = Figure(size = (1000, 400))\n    ax = Axis(\n        f[1, 1],\n        title = \"Simulated EEG data\",\n        titlesize = 18,\n        xlabel = \"Time [samples]\",\n        ylabel = \"Amplitude [µV]\",\n        xlabelsize = 16,\n        ylabelsize = 16,\n        xgridvisible = false,\n        ygridvisible = false,\n        limits = ((90, 390), nothing),\n    )\n\n    lines!(data; color = \"black\")\n\n    #plot the event onsets\n    evts_s = @subset(evts, :event .== 'S')\n    evts_c = @subset(evts, :event .== 'C')\n    evts_r = @subset(evts, :event .== 'R')\n\n    vlines!(\n        ax,\n        evts_s.latency,\n        color = \"red\",\n        linestyle = :dash,\n        linewidth = 2,\n        label = \"Stimulus\",\n    )\n    vlines!(\n        ax,\n        evts_c.latency,\n        color = \"green\",\n        linestyle = :dash,\n        linewidth = 2,\n        label = \"C\",\n    )\n    vlines!(\n        ax,\n        evts_r.latency,\n        color = \"blue\",\n        linestyle = :dash,\n        linewidth = 2,\n        label = \"R\",\n    )\n    axislegend(\"Event onset\"; unique = true)\n    display(f)\nend","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"</details>","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"(Image: simulated_eeg_graph)","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"Finally, to run the RIDE algorithm, we need to remove the C events from the evts dataframe. They will be estimated during the algorithm and can then be compared to the actual latencies.","category":"page"},{"location":"10-data_simulation/","page":"Simulation with Variable Latency Components","title":"Simulation with Variable Latency Components","text":"#only keep the S and R events, the C events will be calculated by the RIDE algorithm\nevts_without_c = @subset(evts, :event .== 'S' .|| :event .== 'R')","category":"page"},{"location":"#UnfoldRIDE.jl-Documentation","page":"UnfoldRIDE.jl Documentation","title":"UnfoldRIDE.jl Documentation","text":"","category":"section"},{"location":"","page":"UnfoldRIDE.jl Documentation","title":"UnfoldRIDE.jl Documentation","text":"Welcome to the documentation for UnfoldRIDE, a re-implementation of the RIDE algorithm in Julia with an extension to replace the RIDEs iterative decomposition with an Unfold deconvolution.","category":"page"},{"location":"","page":"UnfoldRIDE.jl Documentation","title":"UnfoldRIDE.jl Documentation","text":"<div style=\"width:60%; margin: auto;\">\n</div>","category":"page"},{"location":"#Key-features","page":"UnfoldRIDE.jl Documentation","title":"Key features","text":"","category":"section"},{"location":"","page":"UnfoldRIDE.jl Documentation","title":"UnfoldRIDE.jl Documentation","text":"Component Decomposition using the RIDE method\nC-Latency Estimation\nRIDE with an Unfold deconvolution","category":"page"},{"location":"#Installation","page":"UnfoldRIDE.jl Documentation","title":"Installation","text":"","category":"section"},{"location":"","page":"UnfoldRIDE.jl Documentation","title":"UnfoldRIDE.jl Documentation","text":"julia> using Pkg; Pkg.add(\"UnfoldRIDE\")","category":"page"},{"location":"","page":"UnfoldRIDE.jl Documentation","title":"UnfoldRIDE.jl Documentation","text":"For more detailed instructions please refer to Installing Julia & Unfold Packages.","category":"page"},{"location":"#Usage-example","page":"UnfoldRIDE.jl Documentation","title":"Usage example","text":"","category":"section"},{"location":"","page":"UnfoldRIDE.jl Documentation","title":"UnfoldRIDE.jl Documentation","text":"#config for ride algorithm\ncfg = RideConfig(\n    #sfreq is the sampling frequency of the data\n    sfreq = 100,\n    #ranges for the individual components have to be determined through manual inspection of the data\n    s_range = [-0.1, 0.3],\n    r_range = [0, 0.4],\n    c_range = [-0.4, 0.4],\n    #the range in which the initial peak estimation for the C component is performed\n    c_estimation_range = [0, 0.9],\n    #the range for one epoch\n    epoch_range = [-0.1, 1]\n)\n#run the ride algorithm\nresultsClassic = ride_algorithm(ClassicMode, data_noisy, evts_without_c, cfg)\nresultsUnfold = ride_algorithm(UnfoldMode, data_noisy, evts_without_c, cfg)","category":"page"},{"location":"#Where-to-start:-Learning-roadmap","page":"UnfoldRIDE.jl Documentation","title":"Where to start: Learning roadmap","text":"","category":"section"},{"location":"#1.-First-steps","page":"UnfoldRIDE.jl Documentation","title":"1. First steps","text":"","category":"section"},{"location":"","page":"UnfoldRIDE.jl Documentation","title":"UnfoldRIDE.jl Documentation","text":"🔗 Data Simulation","category":"page"},{"location":"","page":"UnfoldRIDE.jl Documentation","title":"UnfoldRIDE.jl Documentation","text":"🔗 Running UnfoldRIDE","category":"page"},{"location":"#2.-Intermediate-topics","page":"UnfoldRIDE.jl Documentation","title":"2. Intermediate topics","text":"","category":"section"},{"location":"","page":"UnfoldRIDE.jl Documentation","title":"UnfoldRIDE.jl Documentation","text":"📌 Goal:  🔗","category":"page"},{"location":"#3.-Advanced-topics","page":"UnfoldRIDE.jl Documentation","title":"3. Advanced topics","text":"","category":"section"},{"location":"","page":"UnfoldRIDE.jl Documentation","title":"UnfoldRIDE.jl Documentation","text":"📌 Goal:  🔗","category":"page"},{"location":"#Statement-of-need","page":"UnfoldRIDE.jl Documentation","title":"Statement of need","text":"","category":"section"},{"location":"","page":"UnfoldRIDE.jl Documentation","title":"UnfoldRIDE.jl Documentation","text":"TBD","category":"page"}]
}
